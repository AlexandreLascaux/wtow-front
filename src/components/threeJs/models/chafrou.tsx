/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: JoseDiaz (https://sketchfab.com/JoseDiaz)
license: SKETCHFAB Standard (https://sketchfab.com/licenses)
source: https://sketchfab.com/3d-models/cat-875ecc6060c14cd39d53179923b4b7d4
title: Cat
*/

import * as THREE from 'three'
import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import { useLoader, dispose } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    Teeth_Lower_Cat_0: THREE.Mesh
    Eye_Left_Eyes_0: THREE.Mesh
    Eye_Left_Eye_Shine_0: THREE.Mesh
    Eye_Right_Eyes_0: THREE.Mesh
    Eye_Right_Eye_Shine_0: THREE.Mesh
    Teeth_Upper_Cat_0: THREE.Mesh
    Object_7: THREE.SkinnedMesh
    Object_9: THREE.SkinnedMesh
    _rootJoint: THREE.Bone
  }
  materials: {
    material: THREE.MeshStandardMaterial
    Eyes: THREE.MeshStandardMaterial
    Eye_Shine: THREE.MeshStandardMaterial
  }
}

type ActionName =
  | 'Carry'
  | 'Carry_Move'
  | 'Damage'
  | 'Failure'
  | 'Fall'
  | 'Idle'
  | 'Idle_2'
  | 'Jump_Up'
  | 'Kick'
  | 'Land'
  | 'Pick_Up'
  | 'Roll'
  | 'Roll_In_Place'
  | 'Run'
  | 'Run_In_Place'
  | 'Sleep'
  | 'Talk'
  | 'Throw'
  | 'Victory'
  | 'Walk'
  | 'Walk_In_Place'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default function Chafrou(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const gltf = useLoader(GLTFLoader, "/mascotte/chafrou.glb");
  const { nodes, animations } = gltf as GLTFResult
  const [pointer, setPointer] = useState<boolean>(false);

  const { actions, names } = useAnimations(animations, group)
  
  function randomAnimation() {
    stopAnimations();
    startAnimation(actions[names[Math.floor(Math.random()*names.length)]])
  }

  function stopAnimations(){
    const allActions = Object.entries(actions).map(([key]) => key);
    allActions.forEach((e) => {
      const action = actions[e]
      if(action) action.stop()
    });
  }

  function startAnimation(action: THREE.AnimationAction | null){
    if(action) {
      action.timeScale = 0.8
      action.play();
    }
  }

  useEffect(() => {
    animations.forEach((animation, animationIndex) => {
      let firstKeyFrameSeconds = animation.tracks[0].times[0];
      animation.tracks.forEach((track, trackIndex) => {
        track.times.forEach((time, timesIndex) => {
          animations[animationIndex].tracks[trackIndex].times[timesIndex] = time - firstKeyFrameSeconds
        })
      })
      animation.resetDuration()
    })
  }, [animations])

  useEffect(() => {
    if(actions["Idle"]) {
      actions["Idle"].play()
    } 
  }, [actions])

  useEffect(()=>{
    const element = document.querySelector("canvas");
    if(element){
      if(pointer)element.classList.add("cursor-pointer");
      if(!pointer)element.classList.remove("cursor-pointer");
    }
  }, [pointer])

return (
    <group
      ref={group}
      {...props}
      dispose={null}
      onClick={(e) => {e.stopPropagation(); randomAnimation()}}
      onPointerEnter={() => setPointer(true)}
      onPointerLeave={() => setPointer(false)} 
    >
      <group scale={1.5} rotation={[Math.PI / 2, 0, 0]}>
        <group rotation={[-Math.PI, 0, 0]}>
          <primitive object={nodes._rootJoint} />
          <skinnedMesh
            geometry={nodes.Object_7.geometry}
            material={nodes.Object_7.material}
            skeleton={nodes.Object_7.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Object_9.geometry}
            material={nodes.Object_9.material}
            skeleton={nodes.Object_9.skeleton}
          />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/mascotte/chafrou.glb')
